
Ringworld Particle Dynamics Simulation
===============================================================================


Overview
===============================================================================

   This computational framework simulates the atmospheric retention dynamics
   of a rotating ringworld structure. It models the phase-space evolution
   of molecular constituents in the exospheric region to determine whether
   they exceed escape velocity or are recaptured by the ringworld's
   gravitational potential well.
   
   The simulation implements a collisionless approach where particles evolve
   independently without mutual interactions. The system operates in a
   non-inertial rotating reference frame where Coriolis and centrifugal
   pseudoforces dominate the particle kinematics.


Coordinate System
===============================================================================

   Origin      : Heliocentric (sun-centered)
   X-Y plane   : Equatorial plane of the ringworld structure
   Z-axis      : Orthogonal to the ringworld plane
   Reference   : Non-inertial rotating frame with angular velocity ω about z-axis


Component Modules
===============================================================================

StochasticInput.py
-------------------------------------------------------------------------------
   
   Generates initial conditions via stochastic sampling:
   * Position vectors within defined spatial domains
   * Velocity vectors from Maxwell-Boltzmann distribution
   * Configurable molecular properties


StochasticInputRK45Solver.py
-------------------------------------------------------------------------------
   
   Primary execution module implementing:
   * Adaptive Runge-Kutta particle trajectory integration
   * Classification of escape and recapture events
   * Statistical analysis of ensemble behavior
   * Data visualization and persistence


SolverSharedCodePlusSolar.py
-------------------------------------------------------------------------------
   
   Physics engine implementing:
   * Dynamical equations in the rotating reference frame
   * Runge-Kutta 45 numerical integration
   * Coriolis and centrifugal force calculations
   * Optional heliocentric gravitational field


TrajectoryClassification.py
-------------------------------------------------------------------------------
   
   Analyzes trajectories against boundary conditions:
   * Escape threshold detection
   * Recapture event identification
   * Boundary crossing quantification


tester-mullis-NEW.py
-------------------------------------------------------------------------------
   
   Verification module implementing:
   * Reference frame transformations
   * Analytical vs. numerical solution comparison
   * Error quantification and validation


Execution Instructions
===============================================================================

Primary Simulation
-------------------------------------------------------------------------------

   Run command:
      python StochasticInputRK45Solver.py
   
   Outputs:
      1. Console output:
         - Progress updates as particles are processed
         - Summary statistics (escape/recapture percentages)
         - File save location confirmation
      
      2. Excel file:
         - Named with timestamp (e.g., particle_data_20250314_123456.xlsx)
         - Contains initial/final positions and velocities
         - Records boundary crossings and classification results
      
      3. Visualization plots:
         - X-Y Plot: Horizontal particle trajectories
         - Z-Y Plot: Vertical trajectories with boundary lines
         - Color-coded paths for multiple particle tracking


Verification Tool
-------------------------------------------------------------------------------

   Run command:
      python tester-mullis-NEW.py

	
   Inputs:
      - Initial positions and velocities in inertial frames
      - Initial and fianl simulation time
      - Angular Velocity 
      - Gravitational acceleration constant      
   
   Outputs:
      - Initial/final positions in inertial and rotating frames
      - Calculated vs. numerical position comparisons
      - Error metrics showing solver accuracy
      - Angular velocity and rotation period information


Configuration Parameters
===============================================================================

StochasticInputRK45Solver.py
-------------------------------------------------------------------------------

   t_max                : Simulation time
   dt                   : Integration time step
   num_particles        : Desired number of particles
   is_rotating          : Reference frame selection
   radius               : Ringworld radius
   gravity              : Gravitational acceleration parameter
   save_results         : Data persistence control
   show_plots           : Visualization toggle


TrajectoryClassification.py
-------------------------------------------------------------------------------

   z_length             : Total length of the ringworld
   beta                 : Lateral boundary threshold (half of z_length)
   y_floor              : Lower vertical boundary (1 AU)
   alpha                : Atmospheric threshold
   y_min                : Minimum particle spawn height
   y_max                : Maximum particle spawn height
   
   Classification thresholds    : Criteria for determining particle fate
   Boundary interaction rules   : How particles interact with boundaries
   Beta crossing detection      : Logic for counting boundary crossings


StochasticInput.py
-------------------------------------------------------------------------------

   T                    : Temperature
   m                    : Particle mass
   k_B                  : Boltzmann constant
   scale                : Velocity scale parameter
   unit_vector          : Direction normalization


SolverSharedCodePlusSolar.py
-------------------------------------------------------------------------------

   G                    : Gravitational constant
   solar_mu             : Heliocentric gravitational parameter
   rtol, atol           : Integration error tolerance
   method               : Integration scheme selection
   omega                : Angular velocity vector


Physical Models
===============================================================================

   1. Coriolis Effect: F = -2m(ω × v)
   
   2. Centrifugal Effect: F = -m(ω × (ω × r))
   
   3. Maxwell-Boltzmann Distribution: f(v) ∝ v²exp(-mv²/2kT)
   
   4. Boundary Dynamics: Classification based on geometric thresholds


Parameter Modification
===============================================================================

   To modify simulation parameters:
   
   1. Edit values in their respective files as detailed in the
      "Configuration Parameters" section
      
   2. For quick parameter adjustments, modify values in the
      if __name__ == "__main__" block at the bottom of 
      StochasticInputRK45Solver.py